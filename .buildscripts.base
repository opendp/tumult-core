#!/bin/bash

# Do not edit this file on its own! It contains code common to multiple Tumult
# projects, and should be kept in sync across them. Anything project-specific
# belongs in that project's local .buildscripts file.


# Immediately exit with an error when a command fails.
set -e
# In a shell pipeline, return an error if any of the component commands returns
# an error.
set -o pipefail
# By default, Bash expands non-matching wildcards as just the original wildcard
# rather than as an empty string. This can lead to odd bugs in scripts, and it
# is generally inconvenient, so disable it.
shopt -s nullglob


# Default values for variables; these may be overridden in individual packages'
# .buildscripts files.
TEST_MIN_COVERAGE="80%"


# Linting ######################################################################

function _lint_base () {
    BLACK_OPTS="--experimental-string-processing --skip-magic-trailing-comma $BLACK_EXTRA_OPTS"
    ISORT_OPTS="--recursive $ISORT_EXTRA_OPTS"
    MYPY_OPTS="$MYPY_EXTRA_OPTS"
    PYLINT_OPTS="--score no $PYLINT_EXTRA_OPTS"
    PYDOCSTYLE_OPTS=""

    echo "=== Linting ==="
    cd $BASE_DIR
    if [[ -d test ]]; then
        LINT_DIRS="$SOURCE_DIR test"
    else
        LINT_DIRS="$SOURCE_DIR"
    fi
    set -x
    black $BLACK_OPTS $LINT_DIRS
    isort $ISORT_OPTS $LINT_DIRS
    mypy $MYPY_OPTS $LINT_DIRS
    pylint $PYLINT_OPTS $LINT_DIRS
    set +x
    if [[ "$PYDOCSTYLE_ENABLE" = "true" ]]; then
        set -x
        pydocstyle $PYDOCSTYLE_OPTS $LINT_DIRS
    fi
    set +x
}

function lint () {
    BLACK_EXTRA_OPTS="$BLACK_EXTRA_OPTS --check --diff"
    ISORT_EXTRA_OPTS="$ISORT_EXTRA_OPTS --check-only --diff"
    _lint_base
}

function lint-fix () {
    _lint_base
}

# Testing ######################################################################

# Input variables:
#  - EXTRA_TEST_OPTS: Extra options to pass to nosetests
#  - TEST_MIN_COVERAGE: Minimum allowed coverage for the tests to be considered
#        successful; if not set, completely skip coverage reporting
#  - TEST_DIRS: Directories to search for tests;
#        defaults to "$SOURCE_DIR test/unit test/system" if not set
function test () {
    # logging-level=INFO prevents the massive number of py4j.java_gateway debug
    # logs from being printed out on failed tests.
    TEST_OPTS="
    --verbosity=2 --nocapture --logging-level=INFO --with-doctest
    --with-xunit --xunit-file=junit.xml
    $TEST_EXTRA_OPTS
    "
    if [[ ! -z "$TEST_MIN_COVERAGE" ]]; then
        TEST_OPTS="
        $TEST_OPTS --with-coverage --cover-min-percentage=$TEST_MIN_COVERAGE
        --cover-package=$SOURCE_DIR --cover-branches
        --cover-xml --cover-xml-file=coverage.xml
        --cover-html --cover-html-dir=public/pages/reports/coverage
        "
    fi
    TEST_DIRS="${TEST_DIRS:-$SOURCE_DIR test/unit test/system}"

    echo "=== Testing ==="
    cd $BASE_DIR
    mkdir -p public/pages/reports/
    set -x
    nosetests $TEST_OPTS $TEST_DIRS 2>&1 | tee public/pages/reports/unit.txt
    set +x
}

function test-fast () {
    TEST_EXTRA_OPTS="$TEST_EXTRA_OPTS -a !slow"
    test
}

function test-slow () {
    TEST_EXTRA_OPTS="$TEST_EXTRA_OPTS -a slow"
    TEST_MIN_COVERAGE="0%"
    test
}

function test-doctest () {
    TEST_DIRS="$SOURCE_DIR"
    TEST_MIN_COVERAGE="0%"
    test
}

function test-examples () {
    echo "=== Testing examples ==="
    cd $BASE_DIR
    if [[ ! -d examples/ ]]; then
        echo "No examples directory"
        [ ! "$CI" ] && echo "Skipping..."
        return 0
    fi

    readarray -d '' example_notebooks < \
        <(find examples/ -name "*.ipynb" -not -name "*.nbconvert.ipynb" -print0)
    readarray -d '' example_pyfiles < <(find examples/ -name "*.py" -print0)
    if [[ ${#example_notebooks[@]} -eq 0 && ${#example_pyfiles[@]} -eq 0 ]]; then
        echo "No examples in examples directory"
        [ ! "$CI" ] && echo "Skipping..."
        return 0
    fi
    set -x
    for nb in "${example_notebooks[@]}"; do
        jupyter nbconvert --to notebook --execute "$nb"
    done
    for pyfile in "${example_pyfiles[@]}"; do
        python "$pyfile"
    done
    set +x
}

# Packaging ####################################################################

function package () {
    echo "=== Packaging ==="
    cd $BASE_DIR
    set -x
    poetry build
    set +x
}

# Docs #########################################################################

function _docs_base () {
    cd $BASE_DIR
    if [[ ! -d doc ]]; then
        [ ! "$CI" ] && echo "No doc/ directory, skipping..."
        return 0
    fi
    set -x
    sphinx-build doc/ public/ -b $SPHINX_BUILDER $SPHINX_EXTRA_OPTS
    set +x
}

function docs () {
    echo "=== Building docs ==="
    SPHINX_BUILDER=html _docs_base
}

function docs-linkcheck () {
    echo "=== Link-checking docs ==="
    SPHINX_BUILDER=linkcheck _docs_base
}

function docs-doctest () {
    echo "=== Running doctest on docs ==="
    SPHINX_BUILDER=doctest _docs_base
}

# Release ######################################################################

function prepare-release () {
    # Sanity check the value of $VERSION against our allowed version format --
    # this matches a subset of semantic versions, for example:
    #     0.1.2, 1.2.3-alpha.2, 1.3.0-rc.1
    if [[ ! "$VERSION" =~ ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(alpha|beta|rc)\.(0|[1-9]\d*))?$ ]] ; then
        echo "Invalid \$VERSION: '$VERSION'"
        return 1
    fi
    echo "=== Preparing release $VERSION ==="
    DATE="$(date -I)"
    set -x

    # Once Poetry 1.2[0] and poetry-dynamic-versioning[1] mature, use them for this
    # instead of editing the pyproject file.
    # [0] https://github.com/python-poetry/poetry/projects/6
    # [1] https://github.com/mtkennerly/poetry-dynamic-versioning
    sed -Ei -e "s/^version = \".*?\"$/version = \"$VERSION\"/" pyproject.toml
    # Make sure pyproject was actually updated
    if git diff --exit-code --no-patch -- pyproject.toml ; then
        set +x
        echo "Version update to pyproject file failed"
        echo 'Beginning of pyproject.toml:'
        head -n5 pyproject.toml
        return 1
    fi

    sed -i -e "s/^## Unreleased$/## $VERSION - $DATE/" CHANGELOG.md
    # Make sure changelog was actually updated
    if git diff --exit-code --no-patch -- CHANGELOG.md ; then
        set +x
        echo 'Renaming of changelog "Unreleased" section failed'
        echo 'Beginning of CHANGELOG.md:'
        head -n10 CHANGELOG.md
        return 1
    fi

    pandoc -f markdown -t rst --wrap=preserve CHANGELOG.md -o doc/additional-resources/changelog.rst
    # Insert a "Changelog" anchor so we can link to it correctly.
    sed -i -e "1i .. _Changelog:\n" doc/additional-resources/changelog.rst
    poetry lock --no-update --no-interaction
    set +x
}
