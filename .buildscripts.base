#!/bin/bash

# Do not edit this file on its own! It contains code common to all of Tumult's
# packages, and so should be kept in sync across all
# repositories. Package-specific customization should happen in .buildscripts
# instead.


# Immediately exit with an error when a command fails.
set -e
# In a shell pipeline, return an error if any of the component commands returns
# an error.
set -o pipefail
# By default, Bash expands non-matching wildcards as just the original wildcard
# rather than as an empty string. This can lead to odd bugs in scripts, and it
# is generally inconvenient, so disable it.
shopt -s nullglob


# Default values for variables; these may be overridden in individual packages'
# .buildscripts files.
TEST_MIN_COVERAGE="80%"


function _unimplemented () {
    echo "=== $PACKAGE_DIR does not implement $1 ==="
    # If running locally, just ignore explicitly unimplemented functions -- this
    # allows running a function on all packages without errors in this
    # case. Such functions shouldn't get run in CI, and if they do that likely
    # indicates a mistake, so fail in that case.
    [ ! "$CI" ] && echo "Skipping..."
}


# Linting ######################################################################

function _lint_base () {
    BLACK_OPTS="--experimental-string-processing --skip-magic-trailing-comma $BLACK_EXTRA_OPTS"
    ISORT_OPTS="--recursive $ISORT_EXTRA_OPTS"
    MYPY_OPTS="$MYPY_EXTRA_OPTS"
    PYLINT_OPTS="--score no $PYLINT_EXTRA_OPTS"
    PYDOCSTYLE_OPTS=""

    echo "=== Linting $PACKAGE_DIR ==="
    cd $BASE_DIR/$PACKAGE_DIR
    if [[ -d test ]]; then
        LINT_DIRS="$SOURCE_DIR test"
    else
        LINT_DIRS="$SOURCE_DIR"
    fi
    set -x
    black $BLACK_OPTS $LINT_DIRS
    isort $ISORT_OPTS $LINT_DIRS
    mypy $MYPY_OPTS $LINT_DIRS
    pylint $PYLINT_OPTS $LINT_DIRS
    set +x
    if [[ "$PYDOCSTYLE_ENABLE" = "true" ]]; then
        set -x
        pydocstyle $PYDOCSTYLE_OPTS $LINT_DIRS
    fi
    set +x
}

function _lint () {
    BLACK_EXTRA_OPTS="$BLACK_EXTRA_OPTS --check --diff"
    ISORT_EXTRA_OPTS="$ISORT_EXTRA_OPTS --check-only --diff"
    _lint_base
}

function _lint-fix () {
    _lint_base
}

# These are transparent wrappers around the underscored versions to make it
# easier to add package-specific behavior while still reusing the default
# function. Because Bash doesn't have a way to specify which version of a
# function to use (the most-recently-loaded one wins), this is necessary to
# avoid having to duplicate the above code when overriding these functions.
function lint () {
    _lint
}
function lint-fix () {
    _lint-fix
}

# Testing ######################################################################

# Input variables:
#  - EXTRA_TEST_OPTS: Extra options to pass to nosetests
#  - TEST_MIN_COVERAGE: Minimum allowed coverage for the tests to be considered
#        successful; if not set, completely skip coverage reporting
#  - TEST_DIRS: Directories to search for tests;
#        defaults to "$SOURCE_DIR test/unit test/system" if not set
function _test () {
    # logging-level=INFO prevents the massive number of py4j.java_gateway debug
    # logs from being printed out on failed tests.
    TEST_OPTS="
    --verbosity=2 --nocapture --logging-level=INFO --with-doctest
    --with-xunit --xunit-file=junit.xml
    $TEST_EXTRA_OPTS
    "
    if [[ ! -z "$TEST_MIN_COVERAGE" ]]; then
        TEST_OPTS="
        $TEST_OPTS --with-coverage --cover-min-percentage=$TEST_MIN_COVERAGE
        --cover-package=$SOURCE_DIR --cover-branches
        --cover-xml --cover-xml-file=coverage.xml
        --cover-html --cover-html-dir=public/pages/reports/coverage
        "
    fi
    TEST_DIRS="${TEST_DIRS:-$SOURCE_DIR test/unit test/system}"

    echo "=== Testing $PACKAGE_DIR ==="
    cd $BASE_DIR/$PACKAGE_DIR
    mkdir -p public/pages/reports/
    set -x
    nosetests $TEST_OPTS $TEST_DIRS 2>&1 | tee public/pages/reports/unit.txt
    set +x
}

function _test-fast () {
    TEST_EXTRA_OPTS="$TEST_EXTRA_OPTS -a !slow"
    _test
}

function _test-slow () {
    TEST_EXTRA_OPTS="$TEST_EXTRA_OPTS -a slow"
    TEST_MIN_COVERAGE="0%"
    _test
}

function _test-doctest () {
    TEST_DIRS="$SOURCE_DIR"
    unset TEST_MIN_COVERAGE
    _test
}

function _test-examples () {
    echo "=== Testing $PACKAGE_DIR examples ==="
    cd $BASE_DIR/$PACKAGE_DIR
    if [[ ! -d examples/ ]]; then
        echo "$PACKAGE_DIR does not have an examples directory"
        [ ! "$CI" ] && echo "Skipping..."
        return 0
    fi

    readarray -d '' example_notebooks < \
        <(find examples/ -name "*.ipynb" -not -name "*.nbconvert.ipynb" -print0)
    readarray -d '' example_pyfiles < <(find examples/ -name "*.py" -print0)
    if [[ ${#example_notebooks[@]} -eq 0 && ${#example_pyfiles[@]} -eq 0 ]]; then
        echo "$PACKAGE_DIR does not have any examples"
        [ ! "$CI" ] && echo "Skipping..."
        return 0
    fi
    set -x
    for nb in "${example_notebooks[@]}"; do
        jupyter nbconvert --to notebook --execute "$nb"
    done
    for pyfile in "${example_pyfiles[@]}"; do
        python "$pyfile"
    done
    set +x
}

function test () {
    _test
}
function test-fast () {
    _test-fast
}
function test-slow () {
    _test-slow
}
function test-doctest () {
    _test-doctest
}
function test-examples () {
    _test-examples
}

# Benchmarking #################################################################

# Benchmarking scripts are always custom, so no default behavior makes sense.
function benchmark () {
    _unimplemented benchmark
}

# Packaging ####################################################################

function _package () {
    echo "=== Packaging $PACKAGE_DIR ==="
    cd $BASE_DIR/$PACKAGE_DIR
    set -x
    poetry build
    set +x
}

function package () {
    _package
}

# Docs #########################################################################

# Build the docs for the currently checked-out branch. For doing normal work on
# the docs, this is sufficient, and it's more convenient and faster than a full
# build of all the versions. Intersphinx links between our first-party packages
# will not work in this mode, and it is advised to delete the built docs
# directory before trying to do a full docs build after using it.
function _docs-fast () {
    echo "=== Building minimal docs for $PACKAGE_DIR ==="
    cd $BASE_DIR/$PACKAGE_DIR
    if [[ ! -d doc ]]; then
        [ ! "$CI" ] && echo "$PACKAGE_DIR has no doc/ directory, skipping..."
        return 0
    fi
    set -x
    sphinx-build doc/ public/
    set +x
}

function docs-fast () {
    _docs-fast
}
